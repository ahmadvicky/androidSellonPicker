apply plugin: 'com.android.application'
apply plugin: 'maven-publish'
//apply plugin: 'com.google.gms.google-services'
//apply plugin: 'com.android.application'



static def releaseTime() {
    def date = new Date()
    return date.format("yyyy-MM-dd") + "_" + date.format("hhmmss")
}

android {
    compileSdkVersion cfgs.compileSdkVersion

    defaultConfig {
        applicationId "com.selon.pictureselector"
        minSdkVersion cfgs.minSdkVersion
        targetSdkVersion cfgs.targetSdkVersion
        versionCode cfgs.versionCode
        versionName cfgs.versionName
    }

    signingConfigs {
        pictureSelectorKey {
            storeFile file("signature/picture.jks")
            storePassword "luck888A"
            keyAlias "picture"
            keyPassword "luck888A"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            signingConfig signingConfigs.pictureSelectorKey
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled false
            signingConfig signingConfigs.pictureSelectorKey
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        applicationVariants.all { variant ->
            variant.outputs.all { output ->
                if ('release' == variant.buildType.name) {
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('.aar')) {
                        def time = releaseTime()
                        def fileName = "demo_${time}${"_" + versionName}.aar"
                        outputFileName = fileName
                    }
                }
            }
        }
    }





//    dexOptions {
//        javaMaxHeapSize "4g"
//    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildToolsVersion '31.0.0'
}

task comps {
    afterEvaluate {
        println("Components: " + components*.name)
    }
}

//task androidJavadocs(type: Javadoc) {
//    source = android.sourceSets.main.java.srcDirs
//    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//    android.libraryVariants.all { variant ->
//        if (variant.name == 'release') {
//            owner.classpath += variant.javaCompileProvider.get().classpath
//        }
//    }
//    exclude '**/R.html', '**/R.*.html', '**/index.html'
//}
//
//task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
//    archiveClassifier.set('javadoc')
//    from androidJavadocs.destinationDir
//}
//
//task androidSourcesJar(type: Jar) {
//    archiveClassifier.set('sources')
//    from android.sourceSets.main.java.srcDirs
//}

// Because the components are created only during the afterEvaluate phase, you must
// configure your publications using the afterEvaluate() lifecycle method.
afterEvaluate {
    publishing {
        publications {
            // Creates a Maven publication called "release".
            mavenAar(MavenPublication) {
                // Applies the component for the release build variant.
//                from components.release

                // You can then customize attributes of the publication as shown below.
                groupId 'com.ahmadvicky.images_picker'
                artifactId "$project.name"
                version = '1.0.18'
            }
            // Creates a Maven publication called “debug”.
//            debug(MavenPublication) {
//                // Applies the component for the debug build variant.
//                from components.debug_apk
//
//                groupId 'com.sellon.picker'
//                artifactId 'picker'
//                version = '1.0.13'
//            }
        }
    }

//    publishing {
//        publications {
//            android.libraryVariants.all { variant ->
//
//                "maven${variant.name.capitalize()}Aar"(MavenPublication) {
//                    from components.findByName("android${variant.name.capitalize()}")
//                    groupId 'com.sello.picker-publish'
//                    artifactId 'picker-publish'
//                    version "1.0.8-${variant.name}"
//                }
//            }
//        }
//    }
}

task deleteJar(type: Delete) {
    delete 'libs/androidsellon.jar'
}

task exportjar(type: Copy) {
    from('build/intermediates/compile_library_classes/release/')
    into('libs/')
    include('classes.jar')
    rename('classes.jar', 'androidsellon.jar')
}

exportjar.dependsOn(deleteJar, build)



dependencies {
    implementation project(':selector')
    implementation project(':compress')
    implementation project(':ucrop')
    implementation project(":camerax")
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.8.1'
    implementation "androidx.appcompat:appcompat:${cfgs.version_appcompat}"
    implementation "com.google.android.exoplayer:exoplayer:${cfgs.exoplayer}"
    implementation "androidx.constraintlayout:constraintlayout:${cfgs.constraintlayout}"
    implementation "androidx.recyclerview:recyclerview:${cfgs.version_recyclerview}"
    implementation "com.github.bumptech.glide:glide:${cfgs.glide_version}"
    implementation "com.squareup.picasso:picasso:${cfgs.picasso_version}"
}
